<?php

/**
 * @file at_autoload.module
 *
 * @author Andy Truong
 */

/**
 * You can tell go.module to find your directory by define at_autoload() in your
 * settings.php
 */
if (!function_exists('at_autoload')) {
  /**
   * Wrapper for _at_autoload()
   *
   * @param  string $class
   */
  function at_autoload($class) {
    return _at_autoload($class);
  }
}

/**
 * Register auto loader.
 */
spl_autoload_register('at_autoload');

/**
 * Implements hook_modules_enabled()
 */
function at_autoload_modules_enabled($modules) {
  // Refresh the cached-modules
  at_modules('at_autoload', TRUE);

  at_id(new \Drupal\at_autoload\CustomMapping())->rebuild();
}

/**
 * Implements hook_flush_caches()
 *
 * @see at_autoload_get_file()
 */
function at_autoload_flush_caches() {
  // Rebuild the class mapping
  at_id(new \Drupal\at_autoload\CustomMapping())->rebuild();

  // Flush file-path caching
  if (function_exists('apc_clear_cache')) {
    apc_clear_cache('user');
  }
}

/**
 * Simple PSR-4 autoloader.
 *
 *  /path/to/%module/Class.php -> \Drupal\%module\Class
 *
 * @param  string $class
 */
function _at_autoload($class) {
  // Only Drupal namespace
  $supported = strpos($class, 'Drupal\\') !== FALSE;

  if ($supported && $file = at_autoload_get_file($class)) {
    require_once $file;
  }
}

/**
 * Get autoloading file.
 *
 * @param  string $class
 * @return string Path to file.
 * @see    at_autoload_flush_caches()
 */
function at_autoload_get_file($class, $reset = FALSE) {
  $apc = function_exists('apc_store');
  $cid = "at_autoload:{$class}";

  if ($apc && !$reset) {
    $file = apc_fetch($cid);
    if (FALSE !== $file) {
      return $file;
    }
  }

  $file = _at_autoload_get_file($class);

  if ($apc) {
    // apc_fetch return FALSE on failure, that's why we cast FALSE to 0.
    apc_store($cid, $file ? $file : 0);
  }

  return $file;
}

/**
 * Details implementation for at_autoload_get_file. Heart is here.
 *
 * @param  string $class
 * @return mixed
 */
function _at_autoload_get_file($class) {
  if ($file = _at_autoload_get_file_static($class)) {
    return $file;
  }

  if ($file = _at_autoload_get_file_mapping($class)) {
    return $file;
  }

  return FALSE;
}

/**
 * Find the file path using static option.
 *
 * @param  string $class Class name
 * @return string
 */
function _at_autoload_get_file_static($class) {
  $path = str_replace('\\', DIRECTORY_SEPARATOR, $class);
  $path = DRUPAL_ROOT . "/%s/lib/{$path}.php";

  foreach (at_modules('at_autoload') as $module) {
    if (strpos($path, "Drupal/{$module}/") !== FALSE) {
      $real_path = str_replace('Drupal' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR, '', $path);
      $file = sprintf($real_path, drupal_get_path('module', $module));

      if (file_exists($file)) {
        return $file;
      }
    }
  }
}

/**
 * Find the file path using mapping option.
 * @param  string $class Class name
 * @return string
 */
function _at_autoload_get_file_mapping($class) {
  foreach (variable_get('at_autoload_mapping', array()) as $ns_prefix => $dir) {
    if (0 === strpos($class, $ns_prefix)) {
      $cut_class = substr($class, strlen($ns_prefix) + 1);
      $file  = DRUPAL_ROOT . DIRECTORY_SEPARATOR . $dir . DIRECTORY_SEPARATOR;
      $file .= str_replace('\\', DIRECTORY_SEPARATOR, $cut_class);
      $file .= '.php';
      return $file;
    }
  }
}
